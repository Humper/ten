// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/humper/tor_exit_nodes/pkg/database (interfaces: TorExitNodes)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/humper/tor_exit_nodes/models"
)

// MockTorExitNodes is a mock of TorExitNodes interface.
type MockTorExitNodes struct {
	ctrl     *gomock.Controller
	recorder *MockTorExitNodesMockRecorder
}

// MockTorExitNodesMockRecorder is the mock recorder for MockTorExitNodes.
type MockTorExitNodesMockRecorder struct {
	mock *MockTorExitNodes
}

// NewMockTorExitNodes creates a new mock instance.
func NewMockTorExitNodes(ctrl *gomock.Controller) *MockTorExitNodes {
	mock := &MockTorExitNodes{ctrl: ctrl}
	mock.recorder = &MockTorExitNodesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTorExitNodes) EXPECT() *MockTorExitNodesMockRecorder {
	return m.recorder
}

// DeleteAndAdd mocks base method.
func (m *MockTorExitNodes) DeleteAndAdd(arg0 context.Context, arg1 []models.TorExitNode, arg2 []*models.TorExitNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndAdd", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndAdd indicates an expected call of DeleteAndAdd.
func (mr *MockTorExitNodesMockRecorder) DeleteAndAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndAdd", reflect.TypeOf((*MockTorExitNodes)(nil).DeleteAndAdd), arg0, arg1, arg2)
}

// GetAll mocks base method.
func (m *MockTorExitNodes) GetAll(arg0 context.Context, arg1 []string, arg2 *models.Pagination) (*models.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTorExitNodesMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTorExitNodes)(nil).GetAll), arg0, arg1, arg2)
}

// GetMissingCountries mocks base method.
func (m *MockTorExitNodes) GetMissingCountries(arg0 context.Context, arg1 int) ([]*models.TorExitNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissingCountries", arg0, arg1)
	ret0, _ := ret[0].([]*models.TorExitNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissingCountries indicates an expected call of GetMissingCountries.
func (mr *MockTorExitNodesMockRecorder) GetMissingCountries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissingCountries", reflect.TypeOf((*MockTorExitNodes)(nil).GetMissingCountries), arg0, arg1)
}

// Update mocks base method.
func (m *MockTorExitNodes) Update(arg0 context.Context, arg1 []*models.TorExitNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTorExitNodesMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTorExitNodes)(nil).Update), arg0, arg1)
}
